"use strict";

var cov_6xva6iqyf = function () {
  var path = "/home/patdev/Desktop/Class Work/newEpic-mail/epic_mail/src/controllers/signup.js";
  var hash = "c42ec0ffeb0b173c15917084480915f6eb22cc55";

  var Function = function () {}.constructor;

  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/patdev/Desktop/Class Work/newEpic-mail/epic_mail/src/controllers/signup.js",
    statementMap: {
      "0": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 86
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 27
          },
          end: {
            line: 39,
            column: 7
          }
        },
        line: 9
      }
    },
    branchMap: {},
    s: {
      "0": 0
    },
    f: {
      "0": 0
    },
    b: {},
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _bcryptjs = _interopRequireDefault(require("bcryptjs"));

var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));

var _user = _interopRequireDefault(require("../model/user"));

var _user2 = _interopRequireDefault(require("../data/user"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var signUpController =
/*#__PURE__*/
function () {
  function signUpController() {
    _classCallCheck(this, signUpController);
  }

  _createClass(signUpController, null, [{
    key: "signup",
    value: function signup(req, res) {
      cov_6xva6iqyf.f[0]++;
      cov_6xva6iqyf.s[0]++;
      // const userData = req.body;
      // const salt = bcrypt.genSaltSync(10);
      // const hash = bcrypt.hashSync(userData.password, salt);
      // const user = new User(
      //   userData.id = Data.length,
      //   userData.firstName,
      //   userData.lastName,
      //   userData.country,
      //   userData.phoneNumber,
      //   userData.dateOfBirth,
      //   userData.gender,
      //   userData.email,
      //   userData.password,
      // );
      // if (!Data.find(newUser => newUser.email === userData.email)) {
      //   userData.id = Data.length;
      //   console.log(user);
      //   Data.push(user);
      //   const payload = { subject: user.id };
      //   const token = jwt.sign(payload, 'secretkey');
      //   res.status(201).json({ token, user, 'status':201, 'message':'Register Successful' });
      return res.status(201).json({
        'status': 201,
        'message': 'Register Successful'
      }); // } else {
      //   res.status(401).json({'message':'Email Already Exist', 'status':401});
      // }
    }
  }]);

  return signUpController;
}();

exports.default = signUpController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpZ251cC5qcyJdLCJuYW1lcyI6WyJzaWduVXBDb250cm9sbGVyIiwicmVxIiwicmVzIiwic3RhdHVzIiwianNvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7SUFJcUJBLGdCOzs7Ozs7Ozs7MkJBQ0ZDLEcsRUFBSUMsRyxFQUFJO0FBQUE7QUFBQTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFPQSxHQUFHLENBQUNDLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUFDLGtCQUFTLEdBQVY7QUFBZSxtQkFBVTtBQUF6QixPQUFyQixDQUFQLENBekJtQixDQTBCbkI7QUFFQTtBQUNBO0FBQ0QiLCJzb3VyY2VSb290IjoiL2hvbWUvcGF0ZGV2L0Rlc2t0b3AvQ2xhc3MgV29yay9uZXdFcGljLW1haWwvZXBpY19tYWlsL3NyYy9jb250cm9sbGVycyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0anMnO1xuaW1wb3J0IGp3dCBmcm9tICdqc29ud2VidG9rZW4nXG5pbXBvcnQgVXNlciBmcm9tICcuLi9tb2RlbC91c2VyJ1xuaW1wb3J0IERhdGEgZnJvbSAnLi4vZGF0YS91c2VyJztcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHNpZ25VcENvbnRyb2xsZXJ7XG4gICAgc3RhdGljIHNpZ251cCAocmVxLHJlcyl7XG4gICAgICAgIC8vIGNvbnN0IHVzZXJEYXRhID0gcmVxLmJvZHk7XG4gICAgICAgIC8vIGNvbnN0IHNhbHQgPSBiY3J5cHQuZ2VuU2FsdFN5bmMoMTApO1xuICAgICAgICAvLyBjb25zdCBoYXNoID0gYmNyeXB0Lmhhc2hTeW5jKHVzZXJEYXRhLnBhc3N3b3JkLCBzYWx0KTtcbiAgICAgICAgLy8gY29uc3QgdXNlciA9IG5ldyBVc2VyKFxuICAgICAgICAvLyAgIHVzZXJEYXRhLmlkID0gRGF0YS5sZW5ndGgsXG4gICAgICAgIC8vICAgdXNlckRhdGEuZmlyc3ROYW1lLFxuICAgICAgICAvLyAgIHVzZXJEYXRhLmxhc3ROYW1lLFxuICAgICAgICAvLyAgIHVzZXJEYXRhLmNvdW50cnksXG4gICAgICAgIC8vICAgdXNlckRhdGEucGhvbmVOdW1iZXIsXG4gICAgICAgIC8vICAgdXNlckRhdGEuZGF0ZU9mQmlydGgsXG4gICAgICAgIC8vICAgdXNlckRhdGEuZ2VuZGVyLFxuICAgICAgICAvLyAgIHVzZXJEYXRhLmVtYWlsLFxuICAgICAgICAvLyAgIHVzZXJEYXRhLnBhc3N3b3JkLFxuICAgIFxuICAgICAgICAvLyApO1xuICAgICAgICBcblxuICAgICAgICAvLyBpZiAoIURhdGEuZmluZChuZXdVc2VyID0+IG5ld1VzZXIuZW1haWwgPT09IHVzZXJEYXRhLmVtYWlsKSkge1xuICAgICAgICAvLyAgIHVzZXJEYXRhLmlkID0gRGF0YS5sZW5ndGg7XG4gICAgICAgIC8vICAgY29uc29sZS5sb2codXNlcik7XG4gICAgICAgIC8vICAgRGF0YS5wdXNoKHVzZXIpO1xuICAgICAgICAvLyAgIGNvbnN0IHBheWxvYWQgPSB7IHN1YmplY3Q6IHVzZXIuaWQgfTtcbiAgICAgICAgLy8gICBjb25zdCB0b2tlbiA9IGp3dC5zaWduKHBheWxvYWQsICdzZWNyZXRrZXknKTtcbiAgICAgICAgLy8gICByZXMuc3RhdHVzKDIwMSkuanNvbih7IHRva2VuLCB1c2VyLCAnc3RhdHVzJzoyMDEsICdtZXNzYWdlJzonUmVnaXN0ZXIgU3VjY2Vzc2Z1bCcgfSk7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbih7J3N0YXR1cyc6MjAxLCAnbWVzc2FnZSc6J1JlZ2lzdGVyIFN1Y2Nlc3NmdWwnIH0pO1xuICAgICAgICAvLyB9IGVsc2Uge1xuICAgIFxuICAgICAgICAvLyAgIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsnbWVzc2FnZSc6J0VtYWlsIEFscmVhZHkgRXhpc3QnLCAnc3RhdHVzJzo0MDF9KTtcbiAgICAgICAgLy8gfVxuICAgICAgfVxuICAgIH1cbiJdfQ==