"use strict";

var cov_gjgaipyzp = function () {
  var path = "/home/patdev/Desktop/Class Work/newEpic-mail/epic_mail/src/controllers/message.js";
  var hash = "3da22e1f4dc9cc4b31b0262f1091ab43d3a285c0";

  var Function = function () {}.constructor;

  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/patdev/Desktop/Class Work/newEpic-mail/epic_mail/src/controllers/message.js",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 28
        },
        end: {
          line: 12,
          column: 36
        }
      },
      "1": {
        start: {
          line: 14,
          column: 28
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "2": {
        start: {
          line: 25,
          column: 27
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "3": {
        start: {
          line: 26,
          column: 28
        },
        end: {
          line: 26,
          column: 77
        }
      },
      "4": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "5": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 43
        }
      },
      "6": {
        start: {
          line: 31,
          column: 32
        },
        end: {
          line: 37,
          column: 13
        }
      },
      "7": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 40,
          column: 91
        }
      },
      "8": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 59,
          column: 13
        }
      },
      "9": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 46
        }
      },
      "10": {
        start: {
          line: 45,
          column: 36
        },
        end: {
          line: 51,
          column: 17
        }
      },
      "11": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 54,
          column: 96
        }
      },
      "12": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 58,
          column: 17
        }
      },
      "13": {
        start: {
          line: 57,
          column: 20
        },
        end: {
          line: 57,
          column: 71
        }
      },
      "14": {
        start: {
          line: 64,
          column: 24
        },
        end: {
          line: 64,
          column: 93
        }
      },
      "15": {
        start: {
          line: 64,
          column: 50
        },
        end: {
          line: 64,
          column: 92
        }
      },
      "16": {
        start: {
          line: 65,
          column: 5
        },
        end: {
          line: 65,
          column: 31
        }
      },
      "17": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 60
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 33
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 26,
            column: 13
          }
        },
        loc: {
          start: {
            line: 26,
            column: 28
          },
          end: {
            line: 26,
            column: 77
          }
        },
        line: 26
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 62,
            column: 1
          },
          end: {
            line: 62,
            column: 2
          }
        },
        loc: {
          start: {
            line: 62,
            column: 31
          },
          end: {
            line: 72,
            column: 2
          }
        },
        line: 62
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 64,
            column: 34
          },
          end: {
            line: 64,
            column: 35
          }
        },
        loc: {
          start: {
            line: 64,
            column: 50
          },
          end: {
            line: 64,
            column: 92
          }
        },
        line: 64
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 24
          }
        }, {
          start: {
            line: 29,
            column: 28
          },
          end: {
            line: 29,
            column: 57
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        }, {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        }],
        line: 43
      },
      "3": {
        loc: {
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 43,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 43,
            column: 46
          }
        }, {
          start: {
            line: 43,
            column: 50
          },
          end: {
            line: 43,
            column: 83
          }
        }],
        line: 43
      },
      "4": {
        loc: {
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 58,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 58,
            column: 17
          }
        }, {
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 58,
            column: 17
          }
        }],
        line: 56
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _user = _interopRequireDefault(require("../data/user"));

var _message = _interopRequireDefault(require("../data/message"));

var _message2 = _interopRequireDefault(require("../model/message"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/* Imports the datastructure that holds users and messages
before continuing */
var MessageController =
/*#__PURE__*/
function () {
  function MessageController() {
    _classCallCheck(this, MessageController);
  }

  _createClass(MessageController, null, [{
    key: "sendMessage",
    value: function sendMessage(req, res) {
      cov_gjgaipyzp.f[0]++;
      var messageData = (cov_gjgaipyzp.s[0]++, req.body);
      var newMessages = (cov_gjgaipyzp.s[1]++, new _message2.default(messageData.messageId = _message.default.length, messageData.createdOn = Date.now, messageData.subject, messageData.message, messageData.parentMessageId, messageData.status, messageData.recieversEmail, messageData.sendersEmail));
      var evaluateUser = (cov_gjgaipyzp.s[2]++, _user.default.find(function (dataBaseUser) {
        cov_gjgaipyzp.f[1]++;
        cov_gjgaipyzp.s[3]++;
        return dataBaseUser.email === newMessages.recieversEmail;
      }));
      cov_gjgaipyzp.s[4]++;

      if ((cov_gjgaipyzp.b[1][0]++, evaluateUser) && (cov_gjgaipyzp.b[1][1]++, newMessages.status === 'sent')) {
        cov_gjgaipyzp.b[0][0]++;
        cov_gjgaipyzp.s[5]++;

        _message.default.push(newMessages);

        var sentMessage = (cov_gjgaipyzp.s[6]++, {
          messageId: newMessages.messageId,
          createdOn: newMessages.createdOn,
          subject: newMessages.subject,
          message: newMessages.message,
          status: newMessages.status
        });
        cov_gjgaipyzp.s[7]++;
        res.status(201).json({
          'status': 201,
          sentMessage: sentMessage,
          'message': 'Message Sent Successfully'
        });
      } else {
        cov_gjgaipyzp.b[0][1]++;
        cov_gjgaipyzp.s[8]++;

        if ((cov_gjgaipyzp.b[3][0]++, newMessages.status === 'draft') || (cov_gjgaipyzp.b[3][1]++, newMessages.recieversEmail === '')) {
          cov_gjgaipyzp.b[2][0]++;
          cov_gjgaipyzp.s[9]++;

          _message.default.push(newMessages);

          var _sentMessage = (cov_gjgaipyzp.s[10]++, {
            messageId: newMessages.messageId,
            createdOn: newMessages.createdOn,
            subject: newMessages.subject,
            message: newMessages.message,
            status: newMessages.status
          });

          cov_gjgaipyzp.s[11]++;
          res.status(201).json({
            'status': 201,
            sentMessage: _sentMessage,
            'message': 'Message Saved Successfully'
          });
        } else {
          cov_gjgaipyzp.b[2][1]++;
          cov_gjgaipyzp.s[12]++;

          if (!evaluateUser) {
            cov_gjgaipyzp.b[4][0]++;
            cov_gjgaipyzp.s[13]++;
            res.status(401).json({
              'message': "Invalid Email"
            });
          } else {
            cov_gjgaipyzp.b[4][1]++;
          }
        }
      }
    }
  }, {
    key: "getAllMessages",
    value: function getAllMessages(req, res) {
      cov_gjgaipyzp.f[2]++;
      var evaluateUser = (cov_gjgaipyzp.s[14]++, _user.default.find(function (dataBaseUser) {
        cov_gjgaipyzp.f[3]++;
        cov_gjgaipyzp.s[15]++;
        return dataBaseUser.recieversId === req.params.id;
      }));
      cov_gjgaipyzp.s[16]++;
      console.log(evaluateUser);
      cov_gjgaipyzp.s[17]++;
      res.status(200).json({
        'status': 200,
        evaluateUser: evaluateUser
      });
    } //     static getAllMessages(req, res) {
    //      const getAllMessages = messageStore.filter(recievedMsg => recievedMsg.recieversId ===req.params.id);
    //      return res.status(200).json(getAllMessages)
    //     }
    //     static getSpecificMail(req, res) {
    //        const specificMessages = messageStore.find(
    //             specificMail => specificMail.messageId === req.params.id
    //         );
    //         res.status(200).json({'status': 200, specificMessages});
    //     }
    //     static getAllUreadMessages(req, res) {
    //         let ureadMessages = (
    //             unreadMessages => (unreadMessages.status === 'unread' && unreadMessages.recieversId === req.params.id)
    //         );
    //         res
    //             .status(200)
    //             .json({'status': 200, ureadMessages});
    //     }
    //     static getSentMessages(req,res){
    //        const allsentMessagses= messageStore.filter(sentMessages => sentMessages.sendersId === req.params.id)  
    //         res.status(200).json({'status':200,allsentMessagses});
    // }
    // static deleteAspecificMail(req, res) {
    //   const  messagetoDelete = messageStore.filter(
    //         specificMail => specificMail.messageId=== req.params.id
    //     );
    //     messageStore.pop(messagetoDelete);
    //     res(200).json({'status': 200, 'message':'Message Deleted'});
    // }

  }]);

  return MessageController;
}();

exports.default = MessageController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lc3NhZ2UuanMiXSwibmFtZXMiOlsiTWVzc2FnZUNvbnRyb2xsZXIiLCJyZXEiLCJyZXMiLCJtZXNzYWdlRGF0YSIsImJvZHkiLCJuZXdNZXNzYWdlcyIsIm1lc3NhZ2VNb2RlbCIsIm1lc3NhZ2VJZCIsIm1lc3NhZ2VTdG9yZSIsImxlbmd0aCIsImNyZWF0ZWRPbiIsIkRhdGUiLCJub3ciLCJzdWJqZWN0IiwibWVzc2FnZSIsInBhcmVudE1lc3NhZ2VJZCIsInN0YXR1cyIsInJlY2lldmVyc0VtYWlsIiwic2VuZGVyc0VtYWlsIiwiZXZhbHVhdGVVc2VyIiwidXNlciIsImZpbmQiLCJkYXRhQmFzZVVzZXIiLCJlbWFpbCIsInB1c2giLCJzZW50TWVzc2FnZSIsImpzb24iLCJyZWNpZXZlcnNJZCIsInBhcmFtcyIsImlkIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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QVksMkJBQUdDLGNBQUtDLElBQUwsQ0FBVSxVQUFBQyxZQUFZLEVBQUk7QUFBQTtBQUFBO0FBQUEsZUFBQUEsWUFBWSxDQUFDSyxXQUFiLEtBQTZCMUIsR0FBRyxDQUFDMkIsTUFBSixDQUFXQyxFQUF4QztBQUEwQyxPQUFwRSxDQUFILENBQWhCO0FBRjBCO0FBRzFCQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWVosWUFBWjtBQUgwQjtBQUt2QmpCLE1BQUFBLEdBQUcsQ0FBRWMsTUFBTCxDQUFZLEdBQVosRUFBaUJVLElBQWpCLENBQXNCO0FBQUMsa0JBQVUsR0FBWDtBQUFnQlAsUUFBQUEsWUFBWSxFQUFaQTtBQUFoQixPQUF0QjtBQUtOLEssQ0FHRjtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6Ii9ob21lL3BhdGRldi9EZXNrdG9wL0NsYXNzIFdvcmsvbmV3RXBpYy1tYWlsL2VwaWNfbWFpbC9zcmMvY29udHJvbGxlcnMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcic7XG5pbXBvcnQgdXNlciBmcm9tICcuLi9kYXRhL3VzZXInO1xuaW1wb3J0IG1lc3NhZ2VTdG9yZSBmcm9tICcuLi9kYXRhL21lc3NhZ2UnO1xuaW1wb3J0IG1lc3NhZ2VNb2RlbCBmcm9tICcuLi9tb2RlbC9tZXNzYWdlJztcblxuLyogSW1wb3J0cyB0aGUgZGF0YXN0cnVjdHVyZSB0aGF0IGhvbGRzIHVzZXJzIGFuZCBtZXNzYWdlc1xuYmVmb3JlIGNvbnRpbnVpbmcgKi9cblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZXNzYWdlQ29udHJvbGxlciB7XG4gICAgc3RhdGljIHNlbmRNZXNzYWdlKHJlcSwgcmVzKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VEYXRhID0gcmVxLmJvZHk7XG5cbiAgICAgICAgY29uc3QgbmV3TWVzc2FnZXMgPSBuZXcgbWVzc2FnZU1vZGVsKFxuICAgICAgICAgICAgbWVzc2FnZURhdGEubWVzc2FnZUlkID0gbWVzc2FnZVN0b3JlLmxlbmd0aCxcbiAgICAgICAgICAgIG1lc3NhZ2VEYXRhLmNyZWF0ZWRPbiA9IERhdGUubm93LFxuICAgICAgICAgICAgbWVzc2FnZURhdGEuc3ViamVjdCxcbiAgICAgICAgICAgIG1lc3NhZ2VEYXRhLm1lc3NhZ2UsXG4gICAgICAgICAgICBtZXNzYWdlRGF0YS5wYXJlbnRNZXNzYWdlSWQsXG4gICAgICAgICAgICBtZXNzYWdlRGF0YS5zdGF0dXMsXG4gICAgICAgICAgICBtZXNzYWdlRGF0YS5yZWNpZXZlcnNFbWFpbCxcbiAgICAgICAgICAgIG1lc3NhZ2VEYXRhLnNlbmRlcnNFbWFpbFxuICAgICAgICApXG5cbiAgICAgICAgbGV0IGV2YWx1YXRlVXNlciA9IHVzZXIuZmluZChcbiAgICAgICAgICAgIGRhdGFCYXNlVXNlciA9PiBkYXRhQmFzZVVzZXIuZW1haWwgPT09IG5ld01lc3NhZ2VzLnJlY2lldmVyc0VtYWlsXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKGV2YWx1YXRlVXNlciAmJiBuZXdNZXNzYWdlcy5zdGF0dXMgPT09ICdzZW50Jykge1xuICAgICAgICAgICAgbWVzc2FnZVN0b3JlLnB1c2gobmV3TWVzc2FnZXMpO1xuICAgICAgICAgICAgY29uc3Qgc2VudE1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZUlkOiBuZXdNZXNzYWdlcy5tZXNzYWdlSWQsXG4gICAgICAgICAgICAgICAgY3JlYXRlZE9uOiBuZXdNZXNzYWdlcy5jcmVhdGVkT24sXG4gICAgICAgICAgICAgICAgc3ViamVjdDogbmV3TWVzc2FnZXMuc3ViamVjdCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBuZXdNZXNzYWdlcy5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIHN0YXR1czogbmV3TWVzc2FnZXMuc3RhdHVzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNcbiAgICAgICAgICAgICAgICAuc3RhdHVzKDIwMSlcbiAgICAgICAgICAgICAgICAuanNvbih7J3N0YXR1cyc6IDIwMSwgc2VudE1lc3NhZ2UsICdtZXNzYWdlJzogJ01lc3NhZ2UgU2VudCBTdWNjZXNzZnVsbHknfSlcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG5ld01lc3NhZ2VzLnN0YXR1cyA9PT0gJ2RyYWZ0JyB8fCBuZXdNZXNzYWdlcy5yZWNpZXZlcnNFbWFpbCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlU3RvcmUucHVzaChuZXdNZXNzYWdlcylcbiAgICAgICAgICAgICAgICBjb25zdCBzZW50TWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUlkOiBuZXdNZXNzYWdlcy5tZXNzYWdlSWQsXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRPbjogbmV3TWVzc2FnZXMuY3JlYXRlZE9uLFxuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0OiBuZXdNZXNzYWdlcy5zdWJqZWN0LFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBuZXdNZXNzYWdlcy5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IG5ld01lc3NhZ2VzLnN0YXR1c1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNcbiAgICAgICAgICAgICAgICAgICAgLnN0YXR1cygyMDEpXG4gICAgICAgICAgICAgICAgICAgIC5qc29uKHsnc3RhdHVzJzogMjAxLCBzZW50TWVzc2FnZSwgJ21lc3NhZ2UnOiAnTWVzc2FnZSBTYXZlZCBTdWNjZXNzZnVsbHknfSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFldmFsdWF0ZVVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDEpLmpzb24oeydtZXNzYWdlJzogXCJJbnZhbGlkIEVtYWlsXCJ9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gc3RhdGljIGdldEFsbE1lc3NhZ2VzKHJlcSxyZXMpe1xuICAgIFxuICAgICBsZXQgZXZhbHVhdGVVc2VyID0gdXNlci5maW5kKGRhdGFCYXNlVXNlciA9PiBkYXRhQmFzZVVzZXIucmVjaWV2ZXJzSWQgPT09IHJlcS5wYXJhbXMuaWQpO1xuICAgICBjb25zb2xlLmxvZyhldmFsdWF0ZVVzZXIpO1xuICAgICBcbiAgICAgICAgcmVzIC5zdGF0dXMoMjAwKS5qc29uKHsnc3RhdHVzJzogMjAwLCBldmFsdWF0ZVVzZXJ9KVxuXG4gICAgXG4gICAgIFxuICAgIFxuIH1cblxuXG4vLyAgICAgc3RhdGljIGdldEFsbE1lc3NhZ2VzKHJlcSwgcmVzKSB7XG4vLyAgICAgIGNvbnN0IGdldEFsbE1lc3NhZ2VzID0gbWVzc2FnZVN0b3JlLmZpbHRlcihyZWNpZXZlZE1zZyA9PiByZWNpZXZlZE1zZy5yZWNpZXZlcnNJZCA9PT1yZXEucGFyYW1zLmlkKTtcbi8vICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKGdldEFsbE1lc3NhZ2VzKVxuICAgICBcbi8vICAgICB9XG5cbi8vICAgICBzdGF0aWMgZ2V0U3BlY2lmaWNNYWlsKHJlcSwgcmVzKSB7XG4vLyAgICAgICAgY29uc3Qgc3BlY2lmaWNNZXNzYWdlcyA9IG1lc3NhZ2VTdG9yZS5maW5kKFxuLy8gICAgICAgICAgICAgc3BlY2lmaWNNYWlsID0+IHNwZWNpZmljTWFpbC5tZXNzYWdlSWQgPT09IHJlcS5wYXJhbXMuaWRcbi8vICAgICAgICAgKTtcbi8vICAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oeydzdGF0dXMnOiAyMDAsIHNwZWNpZmljTWVzc2FnZXN9KTtcbi8vICAgICB9XG5cbi8vICAgICBzdGF0aWMgZ2V0QWxsVXJlYWRNZXNzYWdlcyhyZXEsIHJlcykge1xuLy8gICAgICAgICBsZXQgdXJlYWRNZXNzYWdlcyA9IChcbi8vICAgICAgICAgICAgIHVucmVhZE1lc3NhZ2VzID0+ICh1bnJlYWRNZXNzYWdlcy5zdGF0dXMgPT09ICd1bnJlYWQnICYmIHVucmVhZE1lc3NhZ2VzLnJlY2lldmVyc0lkID09PSByZXEucGFyYW1zLmlkKVxuLy8gICAgICAgICApO1xuLy8gICAgICAgICByZXNcbi8vICAgICAgICAgICAgIC5zdGF0dXMoMjAwKVxuLy8gICAgICAgICAgICAgLmpzb24oeydzdGF0dXMnOiAyMDAsIHVyZWFkTWVzc2FnZXN9KTtcbi8vICAgICB9XG5cbi8vICAgICBzdGF0aWMgZ2V0U2VudE1lc3NhZ2VzKHJlcSxyZXMpe1xuLy8gICAgICAgIGNvbnN0IGFsbHNlbnRNZXNzYWdzZXM9IG1lc3NhZ2VTdG9yZS5maWx0ZXIoc2VudE1lc3NhZ2VzID0+IHNlbnRNZXNzYWdlcy5zZW5kZXJzSWQgPT09IHJlcS5wYXJhbXMuaWQpICBcbi8vICAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oeydzdGF0dXMnOjIwMCxhbGxzZW50TWVzc2Fnc2VzfSk7XG5cbi8vIH1cbi8vIHN0YXRpYyBkZWxldGVBc3BlY2lmaWNNYWlsKHJlcSwgcmVzKSB7XG4vLyAgIGNvbnN0ICBtZXNzYWdldG9EZWxldGUgPSBtZXNzYWdlU3RvcmUuZmlsdGVyKFxuLy8gICAgICAgICBzcGVjaWZpY01haWwgPT4gc3BlY2lmaWNNYWlsLm1lc3NhZ2VJZD09PSByZXEucGFyYW1zLmlkXG4vLyAgICAgKTtcbi8vICAgICBtZXNzYWdlU3RvcmUucG9wKG1lc3NhZ2V0b0RlbGV0ZSk7XG4vLyAgICAgcmVzKDIwMCkuanNvbih7J3N0YXR1cyc6IDIwMCwgJ21lc3NhZ2UnOidNZXNzYWdlIERlbGV0ZWQnfSk7XG4vLyB9XG59Il19